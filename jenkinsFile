/*
## PLUGINS
---
Allure Jenkins plugin
Build Pipeline plugin
Build With Parameters plugin
Build Discard plugin
Copy Artifact plugin
Delivery Pipeline plugin
Email Extension plugin
Pipeline plugin
Simple Theme plugin
Test Results Analyzer plugin
HTML Publisher Plugin

## JENKINS SCHEME
---
http://afonsof.com/jenkins-material-theme/dist/material-light.css
*/

pipeline {

    environment {
      GIT_HASH = GIT_COMMIT.take(7)
    }
    agent any

    options {
        buildDiscarder(logRotator(numToKeepStr: '10'))
    }

    stages {
    stage('Polling Scm') {
                steps {
                    echo 'Polling Scm changes...'
                    git url: 'https://github.com/klindziukp/automation-portal.git', branch: 'AP-11-migrate-to-SQL'
                }
            }
    stage('Compile') {
                steps {
                    echo 'Compiling...'
                    gradlew('clean', 'classes')
                }
            }
    stage('Unit Tests') {
                steps {
                    echo 'Perform unit testing...'
                    gradlew('test -i')
                }
                post {
                        success {
                          // publish html
                          publishHTML target: [
                              allowMissing: false,
                              alwaysLinkToLastBuild: false,
                              keepAll: true,
                              reportDir: 'build/test-results/report',
                              reportFiles: 'index.html',
                              reportName: 'jUnit5Report '
                            ]
                        }
                      }
            }
    stage('Code Analysis') {
                steps {
                    echo 'Perform static code analysis...'
                    gradlew('sonarqube')
                     }
                }
    stage('Assemble') {
                 steps {
                     echo 'Assembling build ...'
                     gradlew('assemble')
                     stash includes: '**/build/libs/*.jar', name: 'automation-portal'
                 }
             }
    stage('Archive artifacts') {
            steps {
                echo 'Archive artifacts...'
                archiveArtifacts artifacts: '**/build/libs/*.jar', fingerprint: true, onlyIfSuccessful: true
            }
        }
    stage("Build Docker image") {
           steps {
                buildImage("klindziuk/ap-${env.BUILD_NUMBER}-${GIT_HASH}")

           }
    }

      stage('Push Docker image') {
            agent any
            steps {
               withCredentials([usernamePassword(credentialsId: 'dockerhub', passwordVariable: 'dockerHubPassword', usernameVariable: 'dockerHubUser')]) {
                loginToHub("${env.dockerHubUser}","${env.dockerHubPassword}")
                pushImage("klindziuk/ap-${env.BUILD_NUMBER}-${GIT_HASH}")
              }
           }
       }
    }
  }

def gradlew(String... args) {
    sh "./gradlew ${args.join(' ')} -s"
}

def loginToHub(String userName, String password){
    sh "docker login -u ${userName} -p ${password}"
}

def buildImage(String tag) {
    sh "docker build -t ${tag} ."
}

def pushImage(String tag){
    sh "docker push ${tag}"
}
